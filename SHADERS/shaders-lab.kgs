<?xml version="1.0" encoding="utf-8"?>
<project vert="&#xD; varying vec3 Position;&#xD; varying vec2 texCoord;&#xD; varying vec3 Normal;&#xD; &#xD; uniform mat4 iModelViewMatrix;&#xD; &#xD; uniform vec3 iLightPos; &#xD; uniform vec3 iCamPos; &#xD; &#xD; varying vec3 iLightPos_mv;&#xD; varying vec3 iCamPos_mv;&#xD; &#xD; &#xD;void main(void)&#xD;{&#xD;    gl_Position = gl_ProjectionMatrix * gl_ModelViewMatrix*vec4(gl_Vertex.xyz,1.0);&#xD;    Position = (gl_ModelViewMatrix*gl_Vertex).xyz;&#xD;    texCoord = gl_MultiTexCoord0.xy;&#xD;&#xD;    Normal = normalize((gl_NormalMatrix *gl_Normal).xyz);&#xD;    &#xD;    iLightPos_mv = (iModelViewMatrix*vec4(iLightPos,1.0)).xyz;    &#xD;    iCamPos_mv = (iModelViewMatrix*vec4(iCamPos,1.0)).xyz;&#xD;}&#xD; " pix="varying vec2 texCoord;&#xD;varying vec3 Normal;&#xD;varying vec3 Position;&#xD;vec3 Ia = vec3(0.2,0.2,0.2);&#xD;vec3 Id = vec3(0.7,0.7,0.7);&#xD;vec3 Is = vec3(1.0,1.0,1.0);&#xD;vec3 ma = vec3(1,1,1);&#xD;vec3 md = vec3(1,1,1);&#xD;vec3 ms = vec3(1,1,1);&#xD;float  alpha = 10.0;&#xD;&#xD;varying vec3 iLightPos_mv;&#xD;varying vec3 iCamPos_mv;&#xD;&#xD;&#xD;uniform sampler2D iTexture0;&#xD;uniform sampler2D iTexture1;&#xD;&#xD;&#xD;float originalNormalWeight = 2.5;&#xD;  &#xD;  &#xD;void main(void)&#xD;{&#xD;&#x9;//normal computation&#xD;    vec3 normalMap = vec3(texture2D(iTexture1, texCoord).rgb);&#xD;    normalMap = normalize(vec3((normalMap.x-.5)*2, (normalMap.y-.5)*2, (normalMap.z-.5)*2));&#xD;    normalMap = normalize(vec3(normalMap.x+Normal.x*originalNormalWeight,&#xD;    &#x9;normalMap.y+Normal.y*originalNormalWeight,&#xD;    &#x9;normalMap.z+Normal.z*originalNormalWeight));&#xD;&#xD;&#xD;&#x9;//ambient&#xD;&#x9;vec3 color_amb = Ia*ma;&#xD;&#x9;&#xD;&#x9;//diffuse&#xD;&#x9;vec3 light_vector = normalize(iLightPos_mv - Position);&#xD;&#x9;vec3 color_dif = Id*md*dot( light_vector, normalMap);&#xD;&#x9;&#xD;&#x9;//specular&#xD;&#x9;vec3 cam_vector = normalize(iCamPos_mv - Position);&#xD;&#x9;vec3 reflect_vector = reflect(-light_vector, normalMap);&#xD;&#x9;float cosRC = max(0.0,dot(cam_vector,reflect_vector));&#x9;&#xD;&#x9;vec3 col_spec = Is*ms*pow(cosRC,300);&#xD;&#x9;&#xD;&#x9;//surface&#xD; &#x9;float x = texCoord.x * 2.3 - 1.15;&#xD;    float y = texCoord.y * 2.25 - 1;&#xD;    if(pow(x*x + y*y - 1, 3) - x*x*y*y*y &lt; 0) {&#xD;    &#x9;vec3 texture = vec3(texture2D(iTexture0, texCoord).rgb);&#xD;    &#x9;vec3 light = vec3(color_amb + color_dif + col_spec);&#xD;&#x9;&#x9;gl_FragColor = vec4((texture.x + light.x) / 2, (texture.y + light.y) / 2, (texture.z + light.z) / 2, 1.0);&#x9;&#xD;    } else&#xD;    &#x9;gl_FragColor = vec4(0,0,0,0);&#xD;&#xD;}" tt0="1" t0="C:\Users\yaroslav\Documents\CopmGraph4\SHADERS\texture.png" tt1="1" t1="C:\Users\yaroslav\Documents\CopmGraph4\SHADERS\normal-map.png" tt2="0" t2="" tt3="0" t3="" />